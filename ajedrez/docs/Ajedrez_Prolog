% Algoritmo mueve fichas Ajedrez en Prolog
%       Autores: Alvato Torroba
%                Javier Hertfelder
%                Juan Jose Dominguez
%                Pablo Fernandez
%                Miguel Corchero
% Descripcion:
%               Algoritmo implementado en Prolog a base de diferentes funciones
%               ordenadas alfabeticamente para poder encontrarlas facilmente.
%               Basado en el algoritmo inicial del Doctor Mariano Fernandez, 
%               profesor de la asignatura de IA de la universidad San Pablo CEU.
%               
%
% Con esta función cargamos todas las librerias externas del prolog para el mane-
% jo de funciones con listas etc..
% Previamente hay que copiar los archivos desde la carpeta lib en jiprolog en don-
% se ha instalado la IDE, solo sirve para la IDE JIPROLOG
%
:-load_library('jipxsets.jar').


%%%%%%%%%%%%%%%%%%%%
%  Ahogado/1
% Descripcion: Sirve para comprobar si el rey de cualquier color está en posicion
% de ahogado.  Se comprueba que no haya un posible movimiento para cualquier ficha 
% del turno actual y que el rey no esté en JAQUE.
%%%%%%%%%%%%%%%%%%%%
ahogado(estado(Tablero,Turno)):-
        not(posibleMovimiento(estado(Tablero,Turno),F,I0,J0,I1,J1)),
        not(posibleComida(estado(Tablero,Turno),F,I0,J0,I1,J1)),
        not(esJaque(estado(Tablero,Turno))).

%%%%%%%%%%%%%%%%%%%%
% cambiarTurno/2   
% Descripcion: Funcion que cambia el turno de blancas a negras y viceversa
% lo utilizamos para poder hacer simulaciones con los movimientos y las 
% comidas de las fichas.Mas adelante lo veremos        
%%%%%%%%%%%%%%%%%%%%
%permuta el turno
cambiarTurno(estado(Tablero, blanco)) :- retract(estado(Tablero, blanco)),
                                         assert(estado(Tablero, negro)).
                                         
cambiarTurno(estado(Tablero, negro)) :-  retract(estado(Tablero, negro)),
                                         assert(estado(Tablero, blanco)).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% casillaAmenazada/3
% Descripcion: Vemos si una casilla esta amenazada por cualquiera del turno 
% contrario. Cambiamos el turno para hacer la simulacion y comprobamos si 
% hay alguna ficha del turno contrario que pueda mover a la casilla que le hemos 
% indicado. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                                  
casillaAmenazada(estado(Tablero, Turno0), I, J) :-
        turnoContrario(Turno0, Turno1),
        posibleMovimiento(estado(t0,Turno1),ficha(Figura,Turno1),I0,J0,I,J).
        

%%%%%%%%%%%%%%%%%%
% columna/1      
% Descripcion: Nos devuelve ...
%%%%%%%%%%%%%%%%%%

columna(a).
columna(b).
columna(c).
columna(d).
columna(e).
columna(f).
columna(g).
columna(h).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% columnaNumero    
% Descripcion: Nos devuelve que columna en letras es un numero 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

columnaNumero(1, a).
columnaNumero(2, b).
columnaNumero(3, c).
columnaNumero(4, d).
columnaNumero(5, e).
columnaNumero(6, f).
columnaNumero(7, g).
columnaNumero(8, h).

%%%%%%%%%%%%%%%%%%%%%%%%%%
% comer            
% Descripcion: come una ficha del equipo contrario comprobando varias cosas:
%              1.- si el estado del tablero está en el turno correcto
%              2.- Cambiamos el turno 
%              3.- vemos si se puede comer con la funcion de comprobacion
%              4.- quitamos la ficha comida
%              5.- ponemos la ficha de nuestro turno
%              6.- quitamos nuestra ficha de la posicion inicial
%              7.- cambiamos el turno.
%      
%%%%%%%%%%%%%%%%%%%%%%%%%%
comerFicha(estado(Tablero0, Turno0), ficha(Figura,Turno0),I0,J0,I1,J1):-
        estado(Tablero0,Turno0),
        turnoContrario(Turno0,TurnoCont),
        posibleComida(estado(Tablero0,Turno0),ficha(Figura,Turno0),I0,J0,I1,J1),
        retract(contenido(Tablero0, I1, J1, ficha(FiguraComida, TurnoCont))),
        assert(contenido(Tablero0, I1, J1, ficha(Figura, Turno0))),
        retract(contenido(Tablero0, I0, J0, ficha(Figura, Turno0))), %quita la ficha de su posicion
        cambiarTurno(estado(Tablero0, Turno0)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% comidaPeon/5
% Descripcion: Comprobamos que el Peon coma siempre en diagonal
%              esto lo hacemos porque el peon es la unica ficha que come de forma diferente 
%              a moverse.           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
buenComidaPeon(I0,J0,I1,J1,blanco):- columnaNumero(NI0,I0), columnaNumero(NI1,I1),
        Di is NI0 + 1, Dj is J0 + 1, Di = NI1, Dj = J1. 

buenComidaPeon(I0,J0,I1,J1,blanco):- columnaNumero(NI0,I0), columnaNumero(NI1,I1),
        Di is NI0 - 1, Dj is J0 + 1, Di = NI1, Dj = J1.         
        
buenComidaPeon(I0,J0,I1,J1,negro):- columnaNumero(NI0,I0), columnaNumero(NI1,I1),
        Di is NI0 + 1, Dj is J0 - 1, Di = NI1, Dj = J1.         
        
buenComidaPeon(I0,J0,I1,J1,negro):- columnaNumero(NI0,I0), columnaNumero(NI1,I1),
        Di is NI0 - 1, Dj is J0 - 1, Di = NI1, Dj = J1. 
        
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% condicionGeneralMovimiento/6  
% Descripcion: Comprobamos que la ficha no se salga de los limites del tablero
%              que no este en la misma casilla que otra ficha 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%AQUI ha habido correcciones de codigo. 
condicionGeneralMovimiento(
    estado(Tablero0, Turno0),
    ficha(Figura, Turno0),
    I0, J0, I1, J1) :-
                columna(I0), fila(J0), columna(I1), fila(J1),
                not(mismaCasilla(I0, J0, I1, J1)),
                contenido(Tablero0, I0, J0, ficha(Figura, Turno0)),       %COMPRUEBA que realmente el rey esta en la casilla de origen
                not(contenido(Tablero0, I1, J1, ficha(Figura2, Turno0))).  %COMPRUEBA que tampoco este en el destino OTRA FICHA DEL MISMO COLOR
                
                
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% condicionMovimiento/6   
% Descripcion: Aqui implementamos los diferentes movimientos de las fichas
%               basandonos en el movimiento del rey que nos dio el profesor 
%               y algunas modificaciones menores
%               Lo unico que cambia en las diferentes fichas es la forma de moverse 
%               por el tablero.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Movimiento del rey                             
condicionMovimiento(
    estado(Tablero0, Turno0),
    ficha(rey, Turno0),
    I0, J0, I1, J1) :-
                condicionGeneralMovimiento(estado(Tablero0, Turno0),
                                    ficha(rey, Turno0),
                                    I0, J0, I1, J1),
                numeroColumna(I0, NI0), numeroColumna(I1, NI1),
                Di is NI1 - NI0, Dj is J1 - J0, abs(Di) =< 1, abs(Dj) =< 1,
                not(casillaAmenazada(estado(Tablero0, Turno0), I1, J1)).

% Movimiento del Alfil                       
condicionMovimiento(
    estado(Tablero0, Turno0),
    ficha(alfil, Turno0),
    I0, J0, I1, J1) :-
                condicionGeneralMovimiento(estado(Tablero0, Turno0),
                                    ficha(alfil, Turno0),
                                    I0, J0, I1, J1),
                mismaDiagonal(I0,J0,I1,J1),
                not(hayFichaCamino(estado(Tablero0,Turno0),ficha(alfil,Turno0),I0,J0,I1,J1)).
 
% Movimiento Torre               
condicionMovimiento(
    estado(Tablero0, Turno0),
    ficha(torre, Turno0),
    I0, J0, I1, J1) :-
                condicionGeneralMovimiento(estado(Tablero0, Turno0),
                                    ficha(torre, Turno0),
                                    I0, J0, I1, J1),
                mismaFilaColumna(I0, J0, I1, J1),
                not(hayFichaCamino(estado(Tablero0,Turno0),ficha(torre,Turno0),I0,J0,I1,J1)).

% Movimiento Reina
condicionMovimiento(
    estado(Tablero0, Turno0),
    ficha(reina, Turno0),
    I0, J0, I1, J1) :-
                condicionGeneralMovimiento(estado(Tablero0, Turno0),
                                    ficha(reina, Turno0),
                                    I0, J0, I1, J1),
                mismaFilaColumnaDiagonal(I0, J0, I1, J1),
                not(hayFichaCamino(estado(Tablero0,Turno0),ficha(reina,Turno0),I0,J0,I1,J1)).

% Movimiento Caballo
condicionMovimiento(
    estado(Tablero0, Turno0),
    ficha(caballo, Turno0),
    I0, J0, I1, J1) :-
                condicionGeneralMovimiento(estado(Tablero0, Turno0),
                                    ficha(caballo, Turno0),
                                    I0, J0, I1, J1),
                movCaballo(I0,J0,I1,J1).                

% Movimiento Peon               
condicionMovimiento(
    estado(Tablero0, Turno0),
    ficha(peon, Turno0),
    I0, J0, I1, J1) :-
                condicionGeneralMovimiento(estado(Tablero0, Turno0),
                                    ficha(peon, Turno0),
                                    I0, J0, I1, J1),
                movPeon(I0, J0, I1, J1, Turno0),
                not(hayFichaCamino(estado(Tablero0,Turno0),ficha(peon,Turno0),I0,J0,I1,J1)).
                
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% condicionMovimientoSalvoAmenazas/6    
% Descripcion:  esta funcion sirve para "fingir" los movimientos del contrario
%               es decir fuerza los movimientos del otro color sin tener en 
%               cuenta si amenanazan o no porque de otra forma ese movimiento 
%               no se "fingiria"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
condicionMovimientoSalvoAmenazas(
    estado(Tablero0, Turno0),
    ficha(rey, Turno0),
    I0, J0, I1, J1) :-
                condicionGeneralMovimiento(estado(Tablero0, Turno0),
                                    ficha(rey, Turno0),
                                    I0, J0, I1, J1),
                numeroColumna(I0, NI0), numeroColumna(I1, NI1),
                Di is NI1 - NI0, Dj is J1 - J0, abs(Di) =< 1, abs(Dj) =< 1.
                
%%%%%%%%%%%%%%%%%%%
%  Copiar Tablero 
%  Descripcion: esta funcion no la utilizamos en esta implementacion pero fucniona 
%               copia un tablero en otro para simular movimientos.
%%%%%%%%%%%%%%%%%%%

copiarSituacion(Tablero0,Tablero1):-
        estado(Tablero0,Turno0),
        assert(estado(Tablero1,Turno0)),
        copiarTablero(Tablero0,Tablero1).

copiarTablero(Tablero0,Tablero1):-
        findall((F,I,J),(contenido(Tablero0,F,I,J),
        assert(contenido(Tablero1,F,I,J))),_L). 

limpiarTablero(Tablero0):-
        retractall(contenido(Tablero0,F,I,J)). 
    
%%%%%%%%%%%%%%%%%%
% figura/1       
% Descripcion: Funcion que indica que figuras hay en el tablero
%%%%%%%%%%%%%%%%%%

figura(peon).
figura(torre).
figura(caballo).
figura(alfil).
figura(reina).
figura(rey).

%%%%%%%%%%%%%%%%%%
% fila/1         
% Descripcion: Funcion que indica que filas hay en el tablero
%%%%%%%%%%%%%%%%%%

fila(1).
fila(2).
fila(3).
fila(4).
fila(5).
fila(6).
fila(7).
fila(8).   
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%
% hayFichaCamino/6        
%  Descripcion: Esta funcion indica si hay una ficha en el camino de un movimiento
%               de una ficha la casilla I1-1, J1-1, esto nos servira para
%               comer una ficha, en esta función se comprueba los diferentes 
%               movimientos que pueden hacer las fichas.
%%%%%%%%%%%%%%%%%%%%%%%%%%%

%ARRIBA ABAJO
hayFichaCamino(estado(Tablero0, Turno0),
        ficha(Ficha0, Turno0)
        ,I0, J0, I0, J1):- J1>J0, JF is J1-1, 
        hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I0,JF).

%ABAJO ARRIBA        
hayFichaCamino(estado(Tablero0, Turno0),
        ficha(Ficha0, Turno0)
        ,I0, J0, I0, J1):- J1<J0, JF is J1+1, 
        hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I0,JF).
        
%IZQUIERDA DERECHA        
hayFichaCamino(estado(Tablero0, Turno0),
        ficha(Ficha0, Turno0),I0, J0, I1, J0):- 
                numeroColumna(I0,NI0), numeroColumna(I1,NI1),
                NI1>NI0, NIF is NI1-1, columnaNumero(NIF,IF),
                hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,IF,J0).
                
%DERECHA IZQUIERDA                     
hayFichaCamino(estado(Tablero0, Turno0),
        ficha(Ficha0, Turno0),I0, J0, I1, J0):- 
                numeroColumna(I0,NI0), numeroColumna(I1,NI1),
                NI1<NI0, NIF is NI1+1, columnaNumero(NIF,IF),
                hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,IF,J0).
                           
                          
%DIAGONAL ARRIBA DERECHA
hayFichaCamino(estado(Tablero0, Turno0),
        ficha(Ficha0, Turno0),I0,J0,I1,J1):- 
                J0>J1, JF is J1+1, numeroColumna(I0, NI0), numeroColumna(I1,NI1),
                NI0<NI1, NIF is NI1 - 1, columnaNumero(NIF, IF), 
                hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,IF,JF).
        
%DIAGONAL ARRIBA IZQUIERDA
hayFichaCamino(estado(Tablero0, Turno0),
        ficha(Ficha0, Turno0),I0,J0,I1,J1):- 
                J0>J1, JF is J1+1, numeroColumna(I0, NI0), numeroColumna(I1,NI1),
                NI0>NI1, NIF is NI1 + 1, columnaNumero(NIF, IF),
                hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,IF,JF).        
        
        
%DIAGONAL ABAJO DERECHA
hayFichaCamino(estado(Tablero0, Turno0),
        ficha(Ficha0, Turno0),I0,J0,I1,J1):- 
                J0<J1, JF is J1-1, numeroColumna(I0, NI0), numeroColumna(I1,NI1),
                NI0<NI1, NIF is NI1 - 1, columnaNumero(NIF, IF), 
                hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,IF,JF).
        
%DIAGONAL ABAJO IZQUIERDA
hayFichaCamino(estado(Tablero0, Turno0),
        ficha(Ficha0, Turno0),I0,J0,I1,J1):- 
        J0<J1, JF is J1-1, numeroColumna(I0, NI0), numeroColumna(I1,NI1),
        NI0>NI1, NIF is NI1 + 1, columnaNumero(NIF, IF), 
        hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,IF,JF).                      


%%%%%%%%%%%%%%%%%%%
% hayficha/6        
% Descripcion: Funcion auxiliar para la hayFichaCamino que comprueba si hay una 
%              ficha hasta la casilla final, no hasta la I1-1, J1-1
%%%%%%%%%%%%%%%%%%%
%ARRIBA ABAJO
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I0,J1) :- 
        J1>J0, J01 is J0+1, contenido(Tablero0, I0, J01, ficha(X, Y)),!.
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I0,J1) :-
         J1>J0, J01 is J0+1, hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J01,I0,J1).

%ABAJO ARRIBA
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I0,J1) :- 
        J1<J0, J01 is J0-1, contenido(Tablero0, I0, J01, ficha(X, Y)),!.
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I0,J1) :- 
        J1<J0, J01 is J0-1,
        hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J01,I0,J1).

%IZQUIERDA DERECHA
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J0) :- 
                        numeroColumna(I0, NI0), numeroColumna(I1,NI1),
                        NI1>NI0, NI01 is NI0+1, 
                        columnaNumero(NI01,R0), contenido(Tablero0, R0, J0, ficha(X, Y)),!.
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J0) :- 
                        numeroColumna(I0, NI0), numeroColumna(I1,NI1),
                        NI1>NI0, NI01 is NI0+1, 
                        columnaNumero(NI01,R0), 
                        hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),R0, J0, I1, J0).
%DERECHA IZQUIERDA

hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J0) :- 
                        numeroColumna(I0, NI0), numeroColumna(I1,NI1),
                        NI1<NI0, NI01 is NI0-1, 
                        columnaNumero(NI01,R0), contenido(Tablero0, R0, J0, ficha(X, Y)),!.
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J0) :- 
                        numeroColumna(I0, NI0), numeroColumna(I1,NI1),
                        NI1<NI0, NI01 is NI0-1, 
                        columnaNumero(NI01,R0), 
                        hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),R0,J0,I1,J0).
%DIAGONAL ARRIBA DERECHA

hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J1) :-
         numeroColumna(I0,NI0), numeroColumna(I1,NI1), NI0<NI1 , NI01 is NI0 + 1,columnaNumero(NI01,R0),
         J0>J1, J01 is J0 - 1, contenido(Tablero0, R0, J01, ficha(X,Y)),!.
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J1) :- 
        numeroColumna(I0,NI0), numeroColumna(I1,NI1), NI0<NI1 , NI01 is NI0 + 1,
        columnaNumero(NI01,R0),J0>J1, J01 is J0 - 1, 
        hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),R0,J01,I1,J1).

%DIAGONAL ARRIBA IZQUIERDA

hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J1) :-
        numeroColumna(I0,NI0), numeroColumna(I1,NI1), NI0 > NI1 , 
        NI01 is NI0 - 1,columnaNumero(NI01,R0),
        J0>J1, J01 is J0 - 1, contenido(Tablero0, R0, J01, ficha(X,Y)),!.
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J1) :-
        numeroColumna(I0,NI0), numeroColumna(I1,NI1), NI0 > NI1 , NI01 is NI0 - 1,
        columnaNumero(NI01,R0), J0>J1, J01 is J0 - 1, 
        hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),R0,J01,I1,J1).

%DIAGONAL ABAJO DERECHA

hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J1) :-
         numeroColumna(I0,NI0), numeroColumna(I1,NI1), NI0 < NI1 , NI01 is NI0 + 1,
         columnaNumero(NI01,R0), J0 < J1, J01 is J0 + 1, 
         contenido(Tablero0, R0, J01, ficha(X,Y)),!.
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J1) :- 
        numeroColumna(I0,NI0), numeroColumna(I1,NI1), NI0 < NI1 , NI01 is NI0 + 1,
        columnaNumero(NI01,R0),J0 < J1, J01 is J0 + 1, 
        hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),R0,J01,I1,J1).

%DIAGONAL ABAJO IZQUIERDA                        

hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J1) :-
         numeroColumna(I0,NI0), numeroColumna(I1,NI1), NI0 > NI1 , NI01 is NI0 - 1,
         columnaNumero(NI01,R0),J0 < J1, J01 is J0 + 1,
         contenido(Tablero0, R0, J01, ficha(X,Y)),!.
hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),I0,J0,I1,J1) :-
        numeroColumna(I0,NI0), numeroColumna(I1,NI1), NI0 > NI1 , NI01 is NI0 - 1,
        columnaNumero(NI01,R0),J0 < J1, J01 is J0 + 1,
        hayFicha(estado(Tablero0, Turno0),ficha(Ficha0, Turno0),R0,J01,I1,J1).

%%%%%%%%%%%%%%%%%%%
% Jaque/2 JaqueMate/2    
% Descripcion: Comprueba que una ficha amenace al rey, 
% Descripcion: Comprueba que una o varias fichas puedan comer al rey y que el rey no se
%              pueda mover....                
%%%%%%%%%%%%%%%%%%%
esJaque(estado(Tablero0,Turno0)):-turnoContrario(Turno0, X),
        contenido(Tablero0,I,J,ficha(rey,Turno0))
        ,posibleComida(estado(Tablero0,X),ficha(F,X),I0,J0,I,J).


esJaqueMate(estado(Tablero0,Turno0)):- turnoContrario(Turno0, X),
        esJaque(estado(Tablero0,Turno0)),
        not(posibleMovimiento(estado(Tablero0,Turno0),Ficha0,I0,J0,I1,J1)),
        not(posibleComida(estado(Tablero0,Turno0),Ficha1,I0,J0,I1,J1)).

                        
%%%%%%%%%%%%%%%%%%%                
% mismaCasilla/4 
% Descripcion: compruba si una ficha esta en la misma casilla que otra
%%%%%%%%%%%%%%%%%%%

mismaCasilla(X, Y, X, Y).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% mismaFilaColumnaDiagonal/4  
% Descripcion:comprueba que una ficha este en la ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mismaFilaColumnaDiagonal(I0,J0,I1,J1):- mismaFilaColumna(I0,J0,I1,J1).
mismaFilaColumnaDiagonal(I0,J0,I1,J1):- mismaDiagonal(I0,J0,I1,J1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% mismaFilaColumna/4       
% Descripcion: comprueba que una ficha este en la ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mismaFilaColumna(I0, J0, I0, J1).
mismaFilaColumna(I0, J0, I1, J0).

%%%%%%%%%%%%%%%%%%%%                
% mismaDiagonal/4  
% Descripcion: comprueba que una ficha este en la ...
%%%%%%%%%%%%%%%%%%%%
mismaDiagonal(I0,J0,I1,J1):- numeroColumna(I0, NI0), numeroColumna(I1, NI1), 
                Di is NI1 - NI0, Dj is J1 - J0, abs(Di) =:= abs(Dj).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% movCaballo/4               
% Descripcion: Hace el movimiento del caballo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Arriba - Derecha
movCaballo(I0,J0,I1,J1):- columnaNumero(NI0,I0),columnaNumero(NI1,I1),
        C is NI0+1, F is J0+2, NI1 = C, J1 = F.       
% Derecha - Arriba
movCaballo(I0,J0,I1,J1):- columnaNumero(NI0,I0),columnaNumero(NI1,I1),
        C is NI0+2, F is J0+1, NI1 = C, J1 = F.        
% Derecha - Abajo
movCaballo(I0,J0,I1,J1):- columnaNumero(NI0,I0),columnaNumero(NI1,I1),
        C is NI0+2, F is J0-1, NI1 = C, J1 = F.        
% Abajo - Derecha
movCaballo(I0,J0,I1,J1):- columnaNumero(NI0,I0),columnaNumero(NI1,I1),
        C is NI0+1, F is J0-2, NI1 = C, J1 = F.
% Abajo - Izquierda
movCaballo(I0,J0,I1,J1):- columnaNumero(NI0,I0),columnaNumero(NI1,I1),
        C is NI0-1, F is J0-2, NI1 = C, J1 = F.          
% Izquierda - Abajo
movCaballo(I0,J0,I1,J1):- columnaNumero(NI0,I0),columnaNumero(NI1,I1),
        C is NI0-2, F is J0-1, NI1 = C, J1 = F.        
% Izquierda - Arriba
movCaballo(I0,J0,I1,J1):- columnaNumero(NI0,I0),columnaNumero(NI1,I1),
        C is NI0-2, F is J0+1, NI1 = C, J1 = F.           
% Arriba - Izquierda
movCaballo(I0,J0,I1,J1):- columnaNumero(NI0,I0),columnaNumero(NI1,I1),
        C is NI0-1, F is J0+2, NI1 = C, J1 = F.                


              
%%%%%%%%%%%%%%%%%%%%
% moverFicha/6     
% Descripcion: movimiento de cualquiera de las fichas llamando a posiblemovimiento
%              para comprobar que ese moviento es valido y quito y pongo la ficha        
%%%%%%%%%%%%%%%%%%%%

moverFicha(
    estado(Tablero0, Turno0),
    ficha(Figura, Turno0),
    I0, J0, I1, J1) :-
                estado(Tablero0,Turno0),
                posibleMovimiento(estado(Tablero0,Turno0),ficha(Figura,Turno0),I0,J0,I1,J1),
                retract(contenido(Tablero0, I0, J0, ficha(Figura, Turno0))), %quita la ficha de su posicion
                assert(contenido(Tablero0, I1, J1, ficha(Figura, Turno0))),  %la pone en su nueva posicio. 
                cambiarTurno(estado(Tablero0, Turno0)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%
% movPeon/5               
% Descripcion: Movimiento especifico del peon
%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Movimiento doble peon blanco
movPeon(I0, J0, I0, J1, blanco):- J0 = 2, J1 = 4.

% Movimiento doble peon negro
movPeon(I0, J0, I0, J1, negro):- J0 = 7, J1 = 5.

% Movimiento sencillo peon blanco
movPeon(I0, J0, I0, J1, blanco):- Dis is J1 - J0, Dis = 1.

% Movimiento sencillo peon negro
movPeon(I0, J0, I0, J1, negro):- Dis is J0 - J1, Dis = 1.

%%%%%%%%%%%%%%%%%%%%
% numeroColumna/2  
% Descripcion: esto sirve para convertir las columnas(letras) en numeros (para hacer calculos). 
%%%%%%%%%%%%%%%%%%%%
%
numeroColumna(a, 1).
numeroColumna(b, 2).
numeroColumna(c, 3).
numeroColumna(d, 4).
numeroColumna(e, 5).
numeroColumna(f, 6).
numeroColumna(g, 7).
numeroColumna(h, 8).

%%%%%%%%%%%%%%%%%%%%%%
% posiblecomida/6    
% Descripcion: Comprueba las posibles comidas de una ficha, como el peon, come diferente
%              tenemos la funcion auxiliar. 
%%%%%%%%%%%%%%%%%%%%%%   
% Posible comida para el peon
posibleComida(estado(Tablero0, Turno0), ficha(peon,Turno0),I0,J0,I1,J1):-
        condicionGeneralMovimiento(estado(Tablero0, Turno0),
                                    ficha(peon, Turno0),
                                    I0, J0, I1, J1),
        buenComidaPeon(I0,J0,I1,J1,Turno0),
        turnoContrario(Turno0,TurnoCont),
        contenido(Tablero0,I1,J1,ficha(FiguraComida,TurnoCont)),
        limpiarTablero(t1),
        copiarSituacion(Tablero0,t1),
        not(quedaEnJaqueCom(estado(t1,Turno0),ficha(Figura,Turno0),I0,J0,I1,J1)).
        
posibleComida(estado(Tablero0, Turno0), ficha(Figura, Turno0),I0,J0,I1,J1):-
        figura(Figura),
        not(Figura = peon),
        turnoContrario(Turno0,TurnoCont),
        condicionMovimiento(estado(Tablero0, Turno0),
                                    ficha(Figura, Turno0),
                                    I0, J0, I1, J1),
        contenido(Tablero0,I1,J1,ficha(FiguraComida,TurnoCont)),
        limpiarTablero(t1),
        copiarSituacion(Tablero0,t1),
        not(quedaEnJaqueCom(estado(t1,Turno0),ficha(Figura,Turno0),I0,J0,I1,J1)).

%Funcion que se utiliza para saber si cuando se va a comer, el rey de su color
% queda en jaque, por lo que comer no sería permitido.
quedaEnJaqueCom(estado(Tablero0, Turno0),
    ficha(Figura, Turno0),
    I0, J0, I1, J1) :- 
                turnoContrario(Turno0,TurnoCont),
                retract(contenido(t1,I1,J1,ficha(FiguraCom,TurnoCont))),
                assert(contenido(t1,I1,J1,ficha(Figura,Turno0))),
                retract(contenido(t1,I0,J0,ficha(Figura,Turno0))),
                esJaque(estado(t1,Turno0)).

%%%%%%%%%%%%%%%%%%%%%%%
% posiblemovimiento/6 
% Descripcion: posibles movimientos de todas las fichas
%%%%%%%%%%%%%%%%%%%%%%%  

posibleMovimiento(estado(Tablero0, Turno0),
    ficha(Figura, Turno0),
    I0, J0, I1, J1) :-
                condicionMovimiento(estado(Tablero0, Turno0),
                                    ficha(Figura, Turno0),
                                    I0, J0, I1, J1),
                not(contenido(Tablero0, I1, J1, F)),
                limpiarTablero(t1),
                copiarSituacion(Tablero0,t1),
                not(quedaEnJaqueMov(estado(t1,Turno0),ficha(Figura,Turno0),I0,J0,I1,J1)).

%Funcion que se utiliza para saber si cuando se va a mover, el rey de su color
% queda en jaque, por lo que sería un movimiento no permitido.                
quedaEnJaqueMov(estado(Tablero0, Turno0),
    ficha(Figura, Turno0),
    I0, J0, I1, J1) :- 
                retract(contenido(t1,I0,J0,ficha(Figura,Turno0))),
                assert(contenido(t1,I1,J1,ficha(Figura,Turno0))),
                esJaque(estado(t1,Turno0)).              


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% turnoContrario/2         
% Descripcion: nos informa del turno que toca. (permuta)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                     
turnoContrario(blanco, negro). 
turnoContrario(negro, blanco).                     

                                         
% HECHOS CAMBIANTES
% Posiciones iniciales del tablero t0
% estamos en el tablero to, en la columna e en la fila 1 con el rey blanco
        %y el rey negro en la columna e en fila 8

contenido(t0, b, 1, ficha(rey, blanco)). %esto es como un insertar al inicio
contenido(t0, h, 8, ficha(rey, negro)).
contenido(t0, f, 5, ficha(alfil,negro)).
%contenido(t0, d, 1, ficha(reina,blanco)).
contenido(t0, h, 2, ficha(torre,negro)).
contenido(t0, e, 4, ficha(torre,blanco)).
%contenido(t0, h, 2, ficha(alfil,blanco)).
contenido(t0, c, 3, ficha(reina,negro)).
%contenido(t0, c, 3, ficha(caballo,blanco)).
%contenido(t0, d, 2, ficha(peon, blanco)).
%contenido(t0, b, 2, ficha(peon, negro)).

estado(t0, blanco).%aqui dice: primer turno para blanco